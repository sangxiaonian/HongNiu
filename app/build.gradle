apply plugin: 'com.android.application'

// 显示的时间格式，形如20171110
def releaseTime() {
    return new Date().format("MM-dd-HH-mm", TimeZone.getDefault());
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.hongniu.supply"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

    }
    //签名
    signingConfigs {
        debug {
            storeFile file('../hongniu.jks')
            storePassword 'hongniu'
            keyAlias '泓牛供应链'
            keyPassword 'hongniu'
        }
        release {
            storeFile file('../hongniu.jks')
            storePassword 'hongniu'
            keyAlias '泓牛供应链'
            keyPassword 'hongniu'
        }
    }

    //自定义打包
//    ①output.outputFile.parent表示生成apk的路径，这个是默认路径在项目/app/build/outpus/apk，当然我们可以自己写路径。
//    ②defaultConfig.applicationId表示defaultConfig标签下的名称。
//    ③buildType.name指编译类型，就是debug或者release
//    ④defaultConfig.versionName表示在defaultConfig标签下写的版本号
//    ⑤releaseTime()表示我们定义的得到日期的函数
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "app_" + buildType.name + "_v${defaultConfig.versionName}-${releaseTime()}.apk"
        }
    }


    buildTypes {

        debug {
            // 为版本名添加后缀
            versionNameSuffix "-debug"
            buildConfigField "boolean", "debugMode", "true"
            //自定义一些清单文件数据，根据打包自动更改
            manifestPlaceholders = [RONG_CLOUD_APP_KEY: Debug_RONG_CLOUD_APP_KEY.toString()//融云聊天key
                                    ,GAODE_KEY:GAODE_KEY.toString()//高德地图key
                                    ,HUAWEI_KEY:HUAWEI_KEY.toString()//HUAWEI推送key
            ]
            signingConfig signingConfigs.release
        }
        release {

            minifyEnabled false
            buildConfigField "boolean", "debugMode", "false"
            manifestPlaceholders = [RONG_CLOUD_APP_KEY: Releast_RONG_CLOUD_APP_KEY.toString()//融云聊天key
                                    ,GAODE_KEY:GAODE_KEY.toString()//高德地图key
                                    ,HUAWEI_KEY:HUAWEI_KEY.toString()//HUAWEI推送key
            ]
            signingConfig signingConfigs.release
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
    if (!IsBuildMudle.toBoolean()) {
        implementation project(':ModuleLogin')
        implementation project(':ModuleOrder')
        implementation project(':BaseLibrary')
        implementation project(':ModuleFinance')
        implementation project(':ModuleFestivity')
    } else {
        implementation project(':BaseLibrary')

    }
    implementation project(':ModuleChact')

    api project(path: ':xcalendar')
}
